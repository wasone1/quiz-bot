# handlers/quiz.py

import json
import random
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
import os
from redis.asyncio import Redis


router = Router()

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
with open("questions.json", encoding="utf-8") as f:
    QUESTIONS = json.load(f)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis
REDIS_URL = os.getenv("REDIS_URL")
redis = Redis.from_url(REDIS_URL, decode_responses=True)
print("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis —Å—Ç–≤–æ—Ä–µ–Ω–æ")

# –ö–ª—é—á—ñ –¥–ª—è Redis


def user_score_key(user_id):
    return f"score:{user_id}"


def user_question_key(user_id):
    return f"question:{user_id}"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ


def get_after_answer_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="next_quiz"),
                InlineKeyboardButton(text="–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫",
                                     callback_data="my_score")
            ]
        ]
    )


def get_score_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–û–±–Ω—É–ª–∏—Ç–∏", callback_data="reset_score")]
        ]
    )

# /start


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–í—ñ—Ç–∞—é —É –≤—ñ–∫—Ç–æ—Ä–∏–Ω—ñ! üéâ\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ /quiz, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/quiz ‚Äî –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è\n"
        "/score ‚Äî –º—ñ–π —Ä–∞—Ö—É–Ω–æ–∫\n"
        "/top ‚Äî –ª—ñ–¥–µ—Ä–±–æ—Ä–¥\n"
        "/me ‚Äî –º–æ—î –º—ñ—Å—Ü–µ —É —Ç–æ–ø—ñ",
    )

# /quiz


@router.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    question = random.choice(QUESTIONS)
    await redis.set(user_question_key(message.from_user.id), json.dumps(question))
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=opt)] for opt in question["options"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(question["question"], reply_markup=keyboard)

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ù–ï –¥–ª—è –∫–æ–º–∞–Ω–¥)


@router.message(F.text & ~F.text.startswith("/"))
async def handle_answer(message: types.Message):
    print("–ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç –¥–æ Redis")
    q_json = await redis.get(user_question_key(message.from_user.id))
    if not q_json:
        return
    question = json.loads(q_json)
    answer = message.text.strip().lower()
    correct = question["answer"].strip().lower()
    user_id = message.from_user.id
    user_name = message.from_user.full_name or f"User {user_id}"
    await redis.set(f"user_name:{user_id}", user_name)
    if answer == correct:
        await redis.incr(user_score_key(user_id))
        text = "‚úÖ –í—ñ—Ä–Ω–æ! +1 –±–∞–ª üéâ"
    else:
        text = f"‚ùå –ù–µ–≤—ñ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {question['answer']}"
    await message.answer(text, reply_markup=get_after_answer_keyboard())
    await redis.delete(user_question_key(user_id))

# Callback: –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è


@router.callback_query(lambda c: c.data == "next_quiz")
async def callback_next_quiz(callback: CallbackQuery):
    question = random.choice(QUESTIONS)
    await redis.set(user_question_key(callback.from_user.id), json.dumps(question))
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=opt)] for opt in question["options"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer(question["question"], reply_markup=keyboard)
    await callback.answer()

# Callback: –ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫


@router.callback_query(lambda c: c.data == "my_score")
async def callback_my_score(callback: CallbackQuery):
    score = await redis.get(user_score_key(callback.from_user.id))
    score = int(score) if score else 0
    await callback.message.answer(
        f"–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {score} –±–∞–ª—ñ–≤",
        reply_markup=get_score_keyboard()
    )
    await callback.answer()

# /score


@router.message(Command("score"))
async def cmd_score(message: types.Message):
    score = await redis.get(user_score_key(message.from_user.id))
    score = int(score) if score else 0
    await message.answer(
        f"–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {score} –±–∞–ª—ñ–≤",
        reply_markup=get_score_keyboard()
    )


@router.callback_query(lambda c: c.data == "reset_score")
async def callback_reset_score(callback: CallbackQuery):
    await redis.delete(user_score_key(callback.from_user.id))
    await callback.message.answer("–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ –æ–±–Ω—É–ª–µ–Ω–æ! –ü–æ—á–∏–Ω–∞–π —Å–ø–æ—á–∞—Ç–∫—É üé≤")
    await callback.answer()
    
# /top


@router.message(Command("top"))
async def cmd_top(message: types.Message):
    keys = await redis.keys("score:*")
    scores = []
    for key in keys:
        user_id = key.split(":")[1]
        score = int(await redis.get(key) or 0)
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_name = await redis.get(f"user_name:{user_id}") or f"User {user_id}"
        scores.append((user_name, score))
    scores.sort(key=lambda x: x[1], reverse=True)
    text = "üèÜ –õ—ñ–¥–µ—Ä–±–æ—Ä–¥:\n"
    for i, (user_name, score) in enumerate(scores[:10], 1):
        text += f"{i}. {user_name}: {score} –±–∞–ª—ñ–≤\n"
    if not scores:
        text += "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤."
    await message.answer(text)


@router.message(Command("me"))
async def cmd_me(message: types.Message):
    user_id = str(message.from_user.id)
    user_name = message.from_user.full_name or f"User {user_id}"
    keys = await redis.keys("score:*")
    scores = []
    for key in keys:
        uid = key.split(":")[1]
        score = int(await redis.get(key) or 0)
        scores.append((uid, score))
    scores.sort(key=lambda x: x[1], reverse=True)
    place = next((i+1 for i, (uid, _) in enumerate(scores)
                 if uid == user_id), None)
    my_score = await redis.get(user_score_key(user_id)) or 0
    if place:
        await message.answer(f"{user_name}, —Ç–≤–æ—î –º—ñ—Å—Ü–µ —É —Ç–æ–ø—ñ: {place}\n–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {my_score} –±–∞–ª—ñ–≤")
    else:
        await message.answer("–¢–∏ —â–µ –Ω–µ —É —Ç–æ–ø—ñ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ —É –ª—ñ–¥–µ—Ä–±–æ—Ä–¥!")
